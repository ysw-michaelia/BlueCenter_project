package com.example.datalogger.data

import android.icu.util.Calendar
import androidx.room.ColumnInfo
import androidx.room.Entity
import androidx.room.PrimaryKey
import androidx.room.TypeConverter
import androidx.room.TypeConverters
import java.sql.Timestamp

//data class used in the database for the channels
@Entity(tableName = "channels")
data class Channel(
    @PrimaryKey(autoGenerate = true)
    @ColumnInfo(name = "channel_id")
    var channelId: Int = 0, //id of each channel, autogenerated to avoid confusion
    @ColumnInfo(name = "channel_name")
    var name: String = "", //name of the channel, can be renamed
    @ColumnInfo(name = "channel_sensor")
    var sensorName: String = "None", //info about sensors for further use
    @ColumnInfo(name = "channel_sensor_type")
    var sensorType: Int = 0, //info about sensors for further use
    @ColumnInfo(name = "is_activated")
    var isActivated: Boolean = false, //track activation status
    @ColumnInfo(name = "static_value")
    var staticValue: Float = 0F, //static value, if needs to be referenced
    @ColumnInfo (name = "start_time")
    @field:TypeConverters(TimeStampConverter::class)
    var startTime: Timestamp = Timestamp(Calendar.getInstance().get(Calendar.YEAR),Calendar.getInstance().get(Calendar.MONTH),Calendar.getInstance().get(Calendar.DATE), Calendar.getInstance().get(Calendar.HOUR),Calendar.getInstance().get(Calendar.MINUTE),Calendar.getInstance().get(Calendar.SECOND),Calendar.getInstance().get(Calendar.MILLISECOND)),
    @ColumnInfo (name = "stop_time")
    var stopTime: Timestamp = Timestamp(Calendar.getInstance().get(Calendar.YEAR),Calendar.getInstance().get(Calendar.MONTH),Calendar.getInstance().get(Calendar.DATE), Calendar.getInstance().get(Calendar.HOUR),Calendar.getInstance().get(Calendar.MINUTE),Calendar.getInstance().get(Calendar.SECOND),Calendar.getInstance().get(Calendar.MILLISECOND)),
    )

class TimeStampConverter {
    @TypeConverter
    fun fromTimeStamp(value: Timestamp): Date
}